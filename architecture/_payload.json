[{"data":1,"prerenderedAt":366},["ShallowReactive",2],{"navigation":3,"/architecture":46},[4,19],{"title":5,"path":6,"stem":7,"children":8},"Getting Started","/getting-started","1.getting-started/1.index",[9,11,15],{"title":10,"path":6,"stem":7},"Introduction",{"title":12,"path":13,"stem":14},"Installation","/getting-started/installation","1.getting-started/2.installation",{"title":16,"path":17,"stem":18},"Usage","/getting-started/usage","1.getting-started/3.usage",{"title":20,"path":21,"stem":22,"children":23},"Architecture","/architecture","2.architecture/1.index",[24,26,30,34,38,42],{"title":25,"path":21,"stem":22},"Overview",{"title":27,"path":28,"stem":29},"Repository","/architecture/repository","2.architecture/2.repository",{"title":31,"path":32,"stem":33},"Data Providers","/architecture/data-provider","2.architecture/3.data-provider",{"title":35,"path":36,"stem":37},"Message Queue","/architecture/queue","2.architecture/4.queue",{"title":39,"path":40,"stem":41},"Data Processing","/architecture/data-processing","2.architecture/5.data-processing",{"title":43,"path":44,"stem":45},"Application","/architecture/application","2.architecture/6.application",{"page":47,"surround":361},{"id":48,"title":25,"body":49,"description":355,"extension":356,"links":357,"meta":358,"navigation":359,"path":21,"seo":360,"stem":22},"docs/2.architecture/1.index.md",{"type":50,"value":51,"toc":345},"minimal",[52,70,75,78,83,88,91,141,145,163,167,201,205,248,252,273,277,315,319],[53,54,55,64],"p",{},[56,57],"img",{"alt":58,"className":59,"src":62,"block":63},"architecture",[60,61],"w-full","dark:hidden","/assets/architecture-light.png","",[56,65],{"alt":58,"className":66,"src":69},[60,67,68],"hidden","dark:block","/assets/architecture-dark.png",[71,72,74],"h2",{"id":73},"architecture-overview","Architecture Overview",[53,76,77],{},"Currencia follows a distributed architecture pattern designed for real-time cryptocurrency data processing and delivery, built entirely with the Vue/Nuxt ecosystem.",[79,80,82],"h3",{"id":81},"system-components","System Components",[84,85,87],"h4",{"id":86},"_1-data-providers","1. Data Providers",[53,89,90],{},"The system collects data from multiple sources through different methods:",[92,93,94,115,128],"ul",{},[95,96,97,101],"li",{},[98,99,100],"strong",{},"Web Scrapers",[92,102,103,109],{},[95,104,105,108],{},[98,106,107],{},"CoinMarketCap Scraper",": Extracts market data from CoinMarketCap",[95,110,111,114],{},[98,112,113],{},"CryptoCompare Scraper",": Collects additional market data from CryptoCompare",[95,116,117,120],{},[98,118,119],{},"API Integration",[92,121,122],{},[95,123,124,127],{},[98,125,126],{},"Kraken API",": Direct API integration for trading data",[95,129,130,133],{},[98,131,132],{},"AI Services",[92,134,135],{},[95,136,137,140],{},[98,138,139],{},"Sentiment Analysis",": Cloud-based AI service running on Azure VPS for market sentiment processing",[84,142,144],{"id":143},"_2-message-queue","2. Message Queue",[92,146,147],{},[95,148,149,152],{},[98,150,151],{},"RabbitMQ",[92,153,154,157,160],{},[95,155,156],{},"Handles asynchronous communication between components",[95,158,159],{},"Ensures reliable message delivery",[95,161,162],{},"Manages data flow from providers to formatter",[84,164,166],{"id":165},"_3-data-storage","3. Data Storage",[92,168,169,185],{},[95,170,171,174],{},[98,172,173],{},"Temporary Storage (MongoDB)",[92,175,176,179,182],{},[95,177,178],{},"Stores unformatted raw data",[95,180,181],{},"Enables quick access to recent market data",[95,183,184],{},"Acts as a buffer between data providers and formatter",[95,186,187,190],{},[98,188,189],{},"Permanent Storage (PostgreSQL)",[92,191,192,195,198],{},[95,193,194],{},"Stores processed and formatted data",[95,196,197],{},"Maintains user information and preferences",[95,199,200],{},"Handles relationships between entities",[84,202,204],{"id":203},"_4-application-stack-nuxt-full-stack","4. Application Stack (Nuxt Full Stack)",[92,206,207,226],{},[95,208,209,212],{},[98,210,211],{},"Frontend (Nuxt 3)",[92,213,214,217,220,223],{},[95,215,216],{},"Vue-based framework for the user interface",[95,218,219],{},"Server-Side Rendering (SSR) capabilities",[95,221,222],{},"Built-in state management",[95,224,225],{},"Full TypeScript",[95,227,228,231],{},[98,229,230],{},"Backend (Nitro Server)",[92,232,233,236,239,242,245],{},[95,234,235],{},"Powers both the formatter service and application backend",[95,237,238],{},"Handles API routes and server middleware",[95,240,241],{},"Processes and standardizes data from different sources",[95,243,244],{},"Manages database interactions",[95,246,247],{},"Provides high-performance server capabilities",[79,249,251],{"id":250},"data-flow","Data Flow",[253,254,255,258,261,264,267,270],"ol",{},[95,256,257],{},"Data providers continuously send cryptocurrency information",[95,259,260],{},"RabbitMQ queues incoming data for processing",[95,262,263],{},"Raw data is temporarily stored in MongoDB",[95,265,266],{},"Nitro Server processes and standardizes the information",[95,268,269],{},"Formatted data is stored in PostgreSQL",[95,271,272],{},"Nuxt application retrieves and displays data to users",[79,274,276],{"id":275},"key-technical-features","Key Technical Features",[92,278,279,285,291,297,303,309],{},[95,280,281,284],{},[98,282,283],{},"Unified Server Engine",": Nitro powers both the formatter and application backend",[95,286,287,290],{},[98,288,289],{},"Full-Stack TypeScript",": End-to-end type safety",[95,292,293,296],{},[98,294,295],{},"Server-Side Rendering",": Improved performance and SEO",[95,298,299,302],{},[98,300,301],{},"Real-time Updates",": Reactive data processing and display",[95,304,305,308],{},[98,306,307],{},"Scalable Architecture",": Distributed components for better performance",[95,310,311,314],{},[98,312,313],{},"Data Consistency",": Standardized formatting across all sources",[79,316,318],{"id":317},"development-benefits","Development Benefits",[92,320,321,327,333,339],{},[95,322,323,326],{},[98,324,325],{},"Unified Development Experience",": Same technology stack across services",[95,328,329,332],{},[98,330,331],{},"Simplified Deployment",": Nitro's unified server approach",[95,334,335,338],{},[98,336,337],{},"Strong TypeScript Integration",": Better development experience and type safety",[95,340,341,344],{},[98,342,343],{},"Vue/Nuxt Ecosystem",": Rich set of tools and plugins available",{"title":63,"searchDepth":346,"depth":346,"links":347},2,[348],{"id":73,"depth":346,"text":74,"children":349},[350,352,353,354],{"id":81,"depth":351,"text":82},3,{"id":250,"depth":351,"text":251},{"id":275,"depth":351,"text":276},{"id":317,"depth":351,"text":318},"This section offers a schematic overview of the project's architecture, highlighting core components, data flow, and key integrations.","md",null,{},true,{"title":25,"description":355},[362,364],{"title":16,"path":17,"stem":18,"description":363,"children":-1},"Learn how to use Currencia",{"title":27,"path":28,"stem":29,"description":365,"children":-1},"Understanding Currencia's monorepo architecture",1739524559335]