[{"data":1,"prerenderedAt":181},["ShallowReactive",2],{"navigation":3,"/architecture/queue":46},[4,19],{"title":5,"path":6,"stem":7,"children":8},"Getting Started","/getting-started","1.getting-started/1.index",[9,11,15],{"title":10,"path":6,"stem":7},"Introduction",{"title":12,"path":13,"stem":14},"Installation","/getting-started/installation","1.getting-started/2.installation",{"title":16,"path":17,"stem":18},"Usage","/getting-started/usage","1.getting-started/3.usage",{"title":20,"path":21,"stem":22,"children":23},"Architecture","/architecture","2.architecture/1.index",[24,26,30,34,38,42],{"title":25,"path":21,"stem":22},"Overview",{"title":27,"path":28,"stem":29},"Repository","/architecture/repository","2.architecture/2.repository",{"title":31,"path":32,"stem":33},"Data Providers","/architecture/data-provider","2.architecture/3.data-provider",{"title":35,"path":36,"stem":37},"Message Queue","/architecture/queue","2.architecture/4.queue",{"title":39,"path":40,"stem":41},"Data Processing","/architecture/data-processing","2.architecture/5.data-processing",{"title":43,"path":44,"stem":45},"Application","/architecture/application","2.architecture/6.application",{"page":47,"surround":176},{"id":48,"title":35,"body":49,"description":170,"extension":171,"links":172,"meta":173,"navigation":174,"path":36,"seo":175,"stem":37},"docs/2.architecture/4.queue.md",{"type":50,"value":51,"toc":164},"minimal",[52,57,61,66,110,114,144,149,160],[53,54,56],"h2",{"id":55},"message-queue-rabbitmq","Message Queue (RabbitMQ)",[58,59,60],"p",{},"RabbitMQ acts as the central message broker between the MongoDB storage and the formatter service, ensuring reliable data transmission and processing.",[62,63,65],"h3",{"id":64},"queue-structure","Queue Structure",[67,68,73],"pre",{"className":69,"code":70,"language":71,"meta":72,"style":72},"language-typescript shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","// Main Queue\n- main_queue    // Raw cryptocurrency data\n- error_queue         // Error handling and retries\n","typescript","",[74,75,76,85,99],"code",{"__ignoreMap":72},[77,78,81],"span",{"class":79,"line":80},"line",1,[77,82,84],{"class":83},"syuKq","// Main Queue\n",[77,86,88,92,96],{"class":79,"line":87},2,[77,89,91],{"class":90},"s86vT","-",[77,93,95],{"class":94},"sndM8"," main_queue    ",[77,97,98],{"class":83},"// Raw cryptocurrency data\n",[77,100,102,104,107],{"class":79,"line":101},3,[77,103,91],{"class":90},[77,105,106],{"class":94}," error_queue         ",[77,108,109],{"class":83},"// Error handling and retries\n",[62,111,113],{"id":112},"message-flow","Message Flow",[115,116,117,130],"ol",{},[118,119,120,121],"li",{},"Producer (MongoDB Change Streams)\n",[122,123,124,127],"ul",{},[118,125,126],{},"monitors MongoDB for new data",[118,128,129],{},"Sends raw data to RabbitMQ",[118,131,132,133],{},"Consumer (Formatter Service)\n",[122,134,135,138,141],{},[118,136,137],{},"Receives messages from the queue",[118,139,140],{},"Processes data in order",[118,142,143],{},"Handles data transformation",[145,146,148],"h4",{"id":147},"error-handling","Error Handling",[122,150,151,154,157],{},[118,152,153],{},"Dead letter exchanges for failed messages",[118,155,156],{},"Automatic retries",[118,158,159],{},"Error logging and monitoring",[161,162,163],"style",{},"html pre.shiki code .syuKq, html code.shiki .syuKq{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .s86vT, html code.shiki .s86vT{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sndM8, html code.shiki .sndM8{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":72,"searchDepth":87,"depth":87,"links":165},[166],{"id":55,"depth":87,"text":56,"children":167},[168,169],{"id":64,"depth":101,"text":65},{"id":112,"depth":101,"text":113},"RabbitMQ integration in Currencia","md",null,{},true,{"title":35,"description":170},[177,179],{"title":31,"path":32,"stem":33,"description":178,"children":-1},"Understanding Currencia's data collection system",{"title":39,"path":40,"stem":41,"description":180,"children":-1},"Data processing and transformation in Currencia",1739524559336]